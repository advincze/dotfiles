# Create a new directory and enter it
mkd() {
	mkdir -p "$@" && cd "$@"
}

# Make a temporary directory and enter it
tmpd() {
	if [ $# -eq 0 ]; then
		dir=`mktemp -d` && cd $dir
	else
		dir=`mktemp -d -t $1.XXXXXXXXXX` && cd $dir
	fi
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
extract() {
  if [ -f "$1" ] ; then
    local filename=$(basename "$1")
    local foldername="${filename%%.*}"
    local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
    local didfolderexist=false
    if [ -d "$foldername" ]; then
      didfolderexist=true
      read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
      echo
      if [[ $REPLY =~ ^[Nn]$ ]]; then
        return
      fi
    fi
    mkdir -p "$foldername" && cd "$foldername"
    case $1 in
      *.tar.bz2) tar xjf "$fullpath" ;;
      *.tar.gz) tar xzf "$fullpath" ;;
      *.tar.xz) tar Jxvf "$fullpath" ;;
      *.tar.Z) tar xzf "$fullpath" ;;
      *.tar) tar xf "$fullpath" ;;
      *.taz) tar xzf "$fullpath" ;;
      *.tb2) tar xjf "$fullpath" ;;
      *.tbz) tar xjf "$fullpath" ;;
      *.tbz2) tar xjf "$fullpath" ;;
      *.tgz) tar xzf "$fullpath" ;;
      *.txz) tar Jxvf "$fullpath" ;;
      *.zip) unzip "$fullpath" ;;
      *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

docker-cleanup() {
	docker rm $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
	docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

goinit() {
	PKG_NAME="$1"
	if [ "$PKG_NAME" = "" ]; then PKG_NAME="test"$(date +%Y%m%d%H%M%S) fi
	GOPATH_LAST=${GOPATH##*:}
	mkdir -p $GOPATH_LAST/src/github.com/advincze/$PKG_NAME
	cat>$GOPATH_LAST/src/github.com/advincze/$PKG_NAME/main.go<<EOF
package main

import "fmt"

func main() {
	fmt.Println("$PKG_NAME")
}
EOF

	cd $GOPATH_LAST/src/github.com/advincze/$PKG_NAME
}


gotemp() {
  PKG_DIR="/tmp/go/src/test"$(date +%Y%m%d%H%M%S)
  GOPATH=${GOPATH}:/tmp/go
  mkdir -p $PKG_DIR
  cat>$PKG_DIR/main.go<<EOF
package main

import "fmt"

func main() {
  fmt.Println("tmp")
}
EOF

  cat>$PKG_DIR/main_test.go<<EOF
package main

import "testing"

func TestFoo(t *testing.T) {
  t.Errorf("test fail")
}
EOF

  cd $PKG_DIR
}

func kmsdecrypt(){
  TMP=`mktemp`
  base64 -D >>$TMP <<< $1 
  aws kms decrypt --ciphertext-blob=fileb://$TMP | jq -r .Plaintext | base64 -D
}

func gw(){
  BRANCH=$1
  PWD=`pwd`
  DIR=`basename $PWD`
  WT_DIR="$DIR-$BRANCH"
  git branch $BRANCH
  git worktree add ../$WT_DIR $BRANCH
  cd ../$WT_DIR
}


